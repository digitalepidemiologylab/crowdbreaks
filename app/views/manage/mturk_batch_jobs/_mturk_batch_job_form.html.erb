<%= simple_form_for(@mturk_batch_job, html: {id: 'mturk-batch-job-form'}) do |f| %>
  <%= f.error_notification %>

  <div class="form-group">
    <%= f.error :base %>
  </div>

  <% edit_condition = params[:controller] == 'manage/mturk_batch_jobs' && params[:action] == 'edit' %>
  <% if edit_condition && @mturk_batch_job.auto == true %>
    <fieldset disabled>
  <% end %>
  <div class="form-group">
    <%= f.input :name, hint: 'Has to be unique, must only include small letters, numbers, and underscores' %>
  </div>
  <% if edit_condition && @mturk_batch_job.auto == true %>
    </fieldset>
  <% end %>

  <div class="form-group">
    <%= f.input :title, hint: 'Title of each HIT on Mturk, short and descriptive', input_html: {value: f.object.title || "Label tweet"} %>
  </div>

  <div class="form-group">
    <%= f.input :description, hint: 'A general description about the HIT, displayed on Mturk', input_html: {value: f.object.description || "Answer a few questions about a tweet"} %>
  </div>

  <div class="form-group">
    <%= f.input :keywords, hint: 'Comma-separated list of keywords (used by Mturk for searching)', input_html: {value:  f.object.keywords || "twitter, science, sentiment, opinion"} %>
  </div>

  <div class="form-group">
    <%= f.association :project, hint: 'Choose the question sequence' %>
  </div>

  <div class="form-group">
    <%= f.input :instructions, hint: 'Instructions to the worker (visible on top of the question sequence) in Markdown', input_html: {value: f.object.instructions.present? ? f.object.instructions : @mturk_batch_job.default_mturk_instructions, style: "font-family: monospace;", rows: 10} %>
  </div>

  <div class="form-group">
    <%= f.input 'Upload tweet IDs',
      hint: 'Please use a header-less CSV in which each row corresponds to a tweet ID. You can specify a second column for the text. In that case the text instead of the entire tweet will be shown to turkers.',
      label_html: {class: 'label-no-wrap'} do %>
      <div class="btn btn-secondary" onClick="document.getElementById('job-file').click();">
        <%= fa_icon 'upload', class: 'mr-2' %>
        <span>Choose file</span>
      </div>
    <% end %>
    <div class='hidden-file-upload'>
      <%= f.input :job_file, as: :file, input_html: {id: 'job-file', class: 'input-file'} %>
    </div>
    <%= f.error :job_file %>
    <% if @mturk_batch_job.tasks.count > 0 %>
      <div class="alert alert-danger">Note: Existing tasks and tweet IDs will be overwritten if file is provided.</div>
    <% end %>
  </div>

  <div class="form-group">
    <%= f.input :number_of_assignments,
      as: :integer,
      input_html: { value: f.object.number_of_assignments || 1 },
      hint: "Label every tweet by n different workers." %>
  </div>

  <div class="form-group">
    <%= f.input :max_tasks_per_worker,
      as: :integer,
      hint: "Maximum number of tasks a worker can complete for this batch. If left empty, a worker may work through all his available tasks." %>
  </div>

  <div class="form-group">
    <%= f.input 'Reward', hint: "Reward per finished question sequence. With US minimum wage of 7.25$/h, we get $0.04 for a short question sequence (20sec) and $0.06 for a longer question sequence (30sec)." do %>
      <div class="input-group">
        <span class="input-group-text">$</span>
        <%= f.input_field :reward,
          class: 'form-control border-left-0',
          value: f.object.reward || 0.04 %>
      </div>
    <% end %>
  </div>

  <div class="form-group">
    <%= f.input 'Answer delay start', hint: "Delay until answer buttons become clickable in the beginning of the question sequence." do %>
      <div class="input-group">
        <%= f.input_field :delay_start,
          class: 'form-control border-right-0',
          value: f.object.delay_start
        %>
        <span class="input-group-text">ms</span>
      </div>
    <% end %>
    <%= f.error :delay_start %>
  </div>

  <div class="form-group">
    <%= f.input 'Answer delay subsequent questions', hint: "Delay until answer buttons become clickable for all subsequent questions after the first one." do %>
      <div class="input-group">
        <%= f.input_field :delay_next_question,
          class: 'form-control border-right-0',
          value: f.object.delay_next_question
        %>
        <span class="input-group-text">ms</span>
      </div>
    <% end %>
    <%= f.error :delay_next_question %>
  </div>

  <div class="form-group">
    <%= f.input 'Lifetime', hint: "Time after which a HIT is no longer available for users." do %>
      <div class="input-group">
        <%= f.input_field :lifetime_in_seconds,
          class: 'form-control border-right-0',
          value: f.object.lifetime_in_seconds.nil? ? 30 : f.object.lifetime_in_seconds / (24*3600)
        %>
        <span class="input-group-text">days</span>
      </div>
    <% end %>
    <%= f.error :lifetime_in_seconds %>
  </div>

  <div class="form-group">
    <%= f.input 'Auto-approval', hint: "Time after which a completed HIT gets auto-approved" do %>
      <div class="input-group">
        <%= f.input_field :auto_approval_delay_in_seconds,
          class: 'form-control border-right-0',
          value: f.object.auto_approval_delay_in_seconds.nil? ? 7 : f.object.auto_approval_delay_in_seconds / (24*3600)
        %>
        <span class="input-group-text">days</span>
      </div>
    <% end %>
    <%= f.error :auto_approval_delay_in_seconds %>
  </div>

  <div class="form-group">
    <%= f.input 'Assignment duration', hint: "Time which is given to a worker to complete the task" do %>
      <div class="input-group">
        <%= f.input_field :assignment_duration_in_seconds,
          class: 'form-control border-right-0',
          value: f.object.assignment_duration_in_seconds.nil? ? 20 : f.object.assignment_duration_in_seconds / (60)
        %>
        <span class="input-group-text">min</span>
      </div>
      <%= f.error :assignment_duration_in_seconds %>
    <% end %>
  </div>

  <div class="form-group">
    <%= f.input 'Minimal approval rate', hint: "Workers need at least this HIT approval rate in order to work on this batch. Only allows full integers. Leave empty for having no minimal approval rate." do %>
      <div class="input-group">
        <%= f.input_field :minimal_approval_rate,
          class: 'form-control border-right-0',
          type: :number
        %>
        <span class="input-group-text">%</span>
      </div>
    <% end %>
    <%= f.error :minimal_approval_rate %>
  </div>

  <div class="form-group">
    <%= f.input :min_num_hits_approved,
      label: 'Minimal number of HITs qualification',
      as: :integer,
      input_html: { value: f.object.min_num_hits_approved },
      hint: "The minimum number of HITs a worker needs to have in order to qualify for the tasks. Reasonable numbers are >5000. Leave empty for not having this qualification."
    %>
  </div>

  <div class="form-group">
    <%= f.input :exclude_blacklisted, hint: 'Exclude blacklisted workers. This setting will only work in production and ignored in sandbox.', input_html: {class: "mr-2", checked: f.object.exclude_blacklisted}, label_html: {class: 'checkbox-inline mb-0'} %>
  </div>

  <div class="form-group">
    <%= f.association :mturk_worker_qualification_list, hint: 'Pre-defined qualification lists. Selecting a qualification list will only allow the workers in that list to work on this batch. Make sure to set "Max tasks per worker" accordingly.' %>
  </div>

  <div class="form-group">
    <%= f.input :existing_qualification_type_id, hint: 'Ensure workers have another pre-existing qualification type.' %>
  </div>

  <div class="form-group">
    <%= f.input :check_availability, as: :select, collection: MturkBatchJob.check_availabilities.keys.to_a, include_blank: false,
      hint: 'Determine at which stage a tweet should be checked for whether it is still available. Before: Check before creating tasks (this will create tasks only for available tweets). After: Create tasks for all tweets and check during worker assignment for availability. Never: Try to display tweet and never test for availability.' %>
  </div>

  <div class="form-group">
    <%= f.input :sandbox, input_html: {class: "mr-2", checked: f.object.sandbox}, label_html: {class: 'checkbox-inline'} %>
  </div>

  <div class="form-actions" style="margin-top:25px;">
    <%= f.button :submit, class: 'btn btn-primary btn-lg' %>
  </div>
<% end %>
